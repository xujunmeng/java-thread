



java为线程安全提供了一些工具类，如ThreadLocal类，它代表一个线程局部变量，通过把数据放在ThreadLocal中就可以让
每个线程创建一个该变量的副本，从而避免并发访问的线程安全问题。


ThreadLocal和其他所有的同步机制一样，都是为了解决多线程中对同一变量的访问冲突。

在普通的同步机制中，是通过对象枷锁来实现多个线程对同一变量的安全访问的。该变量是多个线程共享的，
所以要使用这种同步机制，需要很细致的分析在什么时候对变量进行读写，什么时候需要锁定某个对象，什么时候释放该对象的锁等。
这种情况下，系统并没有将这份资源复制多份，只是采用了安全机制来控制对这份资源的访问而已。

通常建议：如果多个线程之间需要共享资源，以达到线程之间的通信功能，就使用同步机制
          如果仅仅需要隔离多个线程之间的共享冲突，则可以使用ThreadLocal